import time
import serial
import cv2

import numpy as np
from keras.models import load_model

PORT = 'COM7'
baud = 19200
startBit = 0xAA

ser = serial.Serial(PORT, baud, timeout=1)

cap = cv2.VideoCapture(0)
FPS = cap.get(cv2.CAP_PROP_FPS)


def start_belt():
    # 레일 시작 코드
    main_command = 0x01
    sub_command = 0x01
    packet = bytearray()
    packet.append(startBit)

    data = [main_command, sub_command]
    length = len(data) + 0x03
    packet.append(length)

    for d in data:
        packet.append(d)

    checksum = ~(length + sum(data)) & 0xFF
    packet.append(checksum)
    ser.write(packet)

def stop_belt():
    # 레일 정지 코드
    main_command = 0x01
    sub_command = 0x00
    packet = bytearray()
    packet.append(startBit)

    data = [main_command, sub_command]
    length = len(data) + 0x03
    packet.append(length)

    for d in data:
        packet.append(d)

    checksum = ~(length + sum(data)) & 0xFF
    packet.append(checksum)

    ser.write(packet)

def class_a():
    # 분류기 A코드
    main_command = 0x03
    sub_command = 0x01
    packet = bytearray()
    packet.append(startBit)

    data = [main_command, sub_command]
    length = len(data) + 0x03
    packet.append(length)

    for d in data:
        packet.append(d)

    checksum = ~(length + sum(data)) & 0xFF
    packet.append(checksum)

    ser.write(packet)

def class_b():
    # 분류기 B코드
    main_command = 0x03
    sub_command = 0x02
    packet = bytearray()
    packet.append(startBit)

    data = [main_command, sub_command]
    length = len(data) + 0x03
    packet.append(length)

    for d in data:
        packet.append(d)

    checksum = ~(length + sum(data)) & 0xFF
    packet.append(checksum)

    ser.write(packet)

def class_c():
    # 분류기 C코드
    main_command = 0x03
    sub_command = 0x03
    packet = bytearray()
    packet.append(startBit)

    data = [main_command, sub_command]
    length = len(data) + 0x03
    packet.append(length)

    for d in data:
        packet.append(d)

    checksum = ~(length + sum(data)) & 0xFF
    packet.append(checksum)

    ser.write(packet)

def speed_up():
    # 레일 속도 UP
    main_command = 0x04
    sub_command = 0x01
    packet = bytearray()
    packet.append(startBit)

    data = [main_command, sub_command]
    length = len(data) + 0x03
    packet.append(length)

    for d in data:
        packet.append(d)

    checksum = ~(length + sum(data)) & 0xFF
    packet.append(checksum)

    ser.write(packet)

def speed_down():
    # 레일 속도 DOWN
    main_command = 0x04
    sub_command = 0x02
    packet = bytearray()
    packet.append(startBit)

    data = [main_command, sub_command]
    length = len(data) + 0x03
    packet.append(length)

    for d in data:
        packet.append(d)

    checksum = ~(length + sum(data)) & 0xFF
    packet.append(checksum)

    ser.write(packet)


def classification():
    # Load the model
    model = load_model('C:/Users/22/Downloads/converted_keras/keras_model.h5')

    # CAMERA can be 0 or 1 based on default camera of your computer.
    camera = cv2.VideoCapture(0)

    # Grab the labels from the labels.txt file. This will be used later.
    labels = open('C:/Users/22/Downloads/converted_keras/labels.txt', 'r').readlines()

    while True:
        # Grab the webcameras image.
        ret, image = camera.read()
        # Resize the raw image into (224-height,224-width) pixels.
        image = cv2.resize(image, (224, 224), interpolation=cv2.INTER_AREA)
        # Show the image in a window
        cv2.imshow('Webcam Image', image)
        # Make the image a numpy array and reshape it to the models input shape.
        image = np.asarray(image, dtype=np.float32).reshape(1, 224, 224, 3)
        # Normalize the image array
        image = (image / 127.5) - 1
        # Have the model predict what the current image is. Model.predict
        # returns an array of percentages. Example:[0.2,0.8] meaning its 20% sure
        # it is the first label and 80% sure its the second label.
        probabilities = model.predict(image)
        # Print what the highest value probabilitie label
        print(labels[np.argmax(probabilities)])
        if labels[np.argmax(probabilities)][0] == '0':
            class_a()
            time.sleep(5)
        elif labels[np.argmax(probabilities)][0] == '1':
            class_b()
        elif labels[np.argmax(probabilities)][0] == '2':
            class_c()

        # Listen to the keyboard for presses.
        keyboard_input = cv2.waitKey(1)
        # 27 is the ASCII for the esc key on your keyboard.
        if keyboard_input == 27:
            break

    camera.release()
    cv2.destroyAllWindows()

def main():
    #start_belt()
    #classification()
    stop_belt()

if __name__=="__main__":
    speed_up()
    #start_belt()
    main()







